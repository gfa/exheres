# Copyright 2009 gustavo panizzo <gfa@zumbi.com.ar>
# bases on previous work by 
# Copyright 2008 Bernd Steinhauser <berniyh@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

MY_PN=VirtualBox
MY_REV=43001

SUMMARY="VirtualBox is a family of powerful x86 virtualization products for enterprise as well as home use."
DESCRIPTION="
VirtualBox is a general-purpose full virtualizer for x86 hardware. Targeted at server, desktop and embedded use, it is now the only professional-quality virtualization solution that is also Open Source Software.

Some of the features of VirtualBox are:
* Modularity. VirtualBox has an extremely modular design with well-defined internal programming interfaces and a client/server design. This makes it easy to control it from several interfaces at once: for example, you can start a virtual machine in a typical virtual machine GUI and then control that machine from the command line, or possibly remotely. VirtualBox also comes with a full Software Development Kit: even though it is Open Source Software, you don't have to hack the source to write a new interface for VirtualBox. 
* Virtual machine descriptions in XML. The configuration settings of virtual machines are stored entirely in XML and are independent of the local machines. Virtual machine definitions can therefore easily be ported to other computers. 
* Guest Additions for Windows and Linux. VirtualBox has special software that can be installed inside Windows and Linux virtual machines to improve performance and make integration much more seamless. Among the features provided by these Guest Additions are mouse pointer integration and arbitrary screen solutions (e.g. by resizing the guest window). 
* Shared folders. Like many other virtualization solutions, for easy data exchange between hosts and guests, VirtualBox allows for declaring certain host directories as "shared folders", which can then be accessed from within virtual machines. 
* Virtual USB Controllers. VirtualBox implements a virtual USB controller and allows you to connect arbitrary USB devices to your virtual machines without having to install device specific drivers on the host. 
* Remote Desktop Protocol. Unlike any other virtualization software, VirtualBox fully supports the standard Remote Desktop Protocol (RDP). A virtual machine can act as an RDP server, allowing you to "run" the virtual machine remotely on some thin client that merely displays the RDP data. 
* USB over RDP. With this unique feature, a virtual machine that acts as an RDP server can still access arbitrary USB devices that are connected on the RDP client. This way, a powerful server machine can virtualize a lot of thin clients that merely need to display RDP data and have USB devices plugged in. 
(from http://www.virtualbox.org/wiki/VirtualBox )
"
HOMEPAGE="http://www.virtualbox.org/"
DOWNLOADS="platform:amd64? ( http://download.virtualbox.org/virtualbox/${PV}/${MY_PN}-${PV}-${MY_REV}-Linux_amd64.run )
    platform:x86? ( http://download.virtualbox.org/virtualbox/${PV}/${MY_PN}-${PV}-${MY_REV}-Linux_x86.run )"

LICENCES="VirtualBox"
SLOT="0"
PLATFORMS="~amd64 ~x86"
MYOPTIONS="
    platform:
        amd64
        x86
"

DEPENDENCIES="
    run:
        dev-libs/glib:2
        media-libs/fontconfig
        media-libs/freetype:2
        media-libs/libpng
      >=media-libs/SDL-1.2.7
        x11-libs/libICE
        x11-libs/libSM
        x11-libs/libX11
        x11-libs/libXcursor
        x11-libs/libXext
        x11-libs/libXfixes
        x11-libs/libXi
        x11-libs/libXinerama
        x11-libs/libXmu
        x11-libs/libXrandr
        x11-libs/libXrender
        x11-libs/libXt
      >=x11-libs/qt-4.3.0:4
"
RESTRICT="strip"

src_unpack() {
    cp "${FETCHEDDIR}"/${MY_PN}-${PV}-${MY_REV}-Linux_${PLATFORM}.run "${WORKBASE}" || die "Failed to copy archive."
    chmod u+x "${WORKBASE}"/${MY_PN}-${PV}-${MY_REV}-Linux_${PLATFORM}.run || die "Failed to make archive executable."
    sh "${WORKBASE}"/${MY_PN}-${PV}-${MY_REV}-Linux_${PLATFORM}.run --noexec --target "${WORK}" || die "Failed to unpack archive."
    mkdir "${WORK}"/opt || die "Failed to create installation dir."
    cd "${WORK}"/opt || die "Failed to enter unpacked dir."
    mv "${WORK}"/${MY_PN}.tar.bz2 "${WORK}"/opt || die "Failed to move VirtualBox tarball."
    unpack ./${MY_PN}.tar.bz2
    rm ${MY_PN}.tar.bz2
}

src_prepare() {
    # Some things should not be installed to /opt, but to the dirs we should
    # use for them, so we'll move them to another place.
    mkdir -p "${WORK}"/{doc,apps,icons}
    mv "${WORK}"/opt/VirtualBox.desktop "${WORK}"/apps || die "Failed to move desktop file."
    mv "${WORK}"/opt/VBox.png "${WORK}"/icons || die "Failed to move icon."
    mv "${WORK}"/opt/UserManual.pdf "${WORK}"/doc || die "Failed to move docs."
    mv "${WORK}"/opt/src "${WORK}" || die "Failed to move module source."
}

src_install() {
    insinto /etc/vbox
    hereins vbox.cfg <<EOF
# VirtualBox installation directory
INSTALL_DIR='/opt/${MY_PN}-${PV}'
# VirtualBox version
INSTALL_VER='${PV}'
EOF

    insinto /usr/share/applications/
    doins "${WORK}"/apps/VirtualBox.desktop

    insinto /usr/share/pixmaps/
    doins "${WORK}"/icons/VBox.png

    dodoc "${WORK}"/doc/UserManual.pdf

    insinto /usr/src/${PNV}
    doins -r "${WORK}"/src/*

    dodir /opt/${MY_PN}-${PV} /usr/bin
    mv "${WORK}"/opt/* "${IMAGE}"/opt/${MY_PN}-${PV}
    for links in {VBoxHeadless,VBoxManage,VBoxSDL,VBoxVRDP,VirtualBox,vboxwebsrv}; do
        dosym /opt/${MY_PN}-${PV}/VBox.sh /usr/bin/${links}
    done
    dosym /opt/${MY_PN}-${PV}/rdesktop-vrdp /usr/bin/rdesktop-vrdp


    # VirtualBox needs to be setuid
    fperms 4711 /opt/${MY_PN}-${PV}/{VirtualBox,VBoxManage}
}

pkg_postinst() {
    ewarn "This exheres does not build the kernel modules for VirtualBox, you will have to do this"
    ewarn "on your own. The source code has been installed to /usr/src/${PNV}"
}

